Done with PREPROCESSING!!!!!!
Making UNET model...
2022-06-09 13:29:10.642023: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX AVX2
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2022-06-09 13:29:10.960136: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1525] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 21676 MB memory:  -> device: 0, name: NVIDIA GeForce RTX 3090, pci bus id: 0000:01:00.0, compute capability: 8.6
D:\Shahriyar_Haseeb\Code\cda_env\lib\site-packages\keras\optimizer_v2\adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.
  super(Adam, self).__init__(name, **kwargs)
Model: "model"
__________________________________________________________________________________________________
 Layer (type)                   Output Shape         Param #     Connected to
==================================================================================================
 input_1 (InputLayer)           [(None, 256, 256, 1  0           []
                                )]

 conv2d (Conv2D)                (None, 256, 256, 11  1120        ['input_1[0][0]']
                                2)

 conv2d_1 (Conv2D)              (None, 256, 256, 11  113008      ['conv2d[0][0]']
                                2)

 max_pooling2d (MaxPooling2D)   (None, 128, 128, 11  0           ['conv2d_1[0][0]']
                                2)

 conv2d_2 (Conv2D)              (None, 128, 128, 22  226016      ['max_pooling2d[0][0]']
                                4)

 conv2d_3 (Conv2D)              (None, 128, 128, 22  451808      ['conv2d_2[0][0]']
                                4)

 max_pooling2d_1 (MaxPooling2D)  (None, 64, 64, 224)  0          ['conv2d_3[0][0]']

 conv2d_4 (Conv2D)              (None, 64, 64, 448)  903616      ['max_pooling2d_1[0][0]']

 conv2d_5 (Conv2D)              (None, 64, 64, 448)  1806784     ['conv2d_4[0][0]']

 max_pooling2d_2 (MaxPooling2D)  (None, 32, 32, 448)  0          ['conv2d_5[0][0]']

 conv2d_6 (Conv2D)              (None, 32, 32, 448)  1806784     ['max_pooling2d_2[0][0]']

 conv2d_7 (Conv2D)              (None, 32, 32, 448)  1806784     ['conv2d_6[0][0]']

 up_sampling2d (UpSampling2D)   (None, 64, 64, 448)  0           ['conv2d_7[0][0]']

 concatenate (Concatenate)      (None, 64, 64, 896)  0           ['conv2d_5[0][0]',
                                                                  'up_sampling2d[0][0]']

 dropout (Dropout)              (None, 64, 64, 896)  0           ['concatenate[0][0]']

 conv2d_8 (Conv2D)              (None, 64, 64, 224)  1806560     ['dropout[0][0]']

 conv2d_9 (Conv2D)              (None, 64, 64, 224)  451808      ['conv2d_8[0][0]']

 up_sampling2d_1 (UpSampling2D)  (None, 128, 128, 22  0          ['conv2d_9[0][0]']
                                4)

 concatenate_1 (Concatenate)    (None, 128, 128, 44  0           ['conv2d_3[0][0]',
                                8)                                'up_sampling2d_1[0][0]']

 dropout_1 (Dropout)            (None, 128, 128, 44  0           ['concatenate_1[0][0]']
                                8)

 conv2d_10 (Conv2D)             (None, 128, 128, 11  451696      ['dropout_1[0][0]']
                                2)

 conv2d_11 (Conv2D)             (None, 128, 128, 11  113008      ['conv2d_10[0][0]']
                                2)

 up_sampling2d_2 (UpSampling2D)  (None, 256, 256, 11  0          ['conv2d_11[0][0]']
                                2)

 concatenate_2 (Concatenate)    (None, 256, 256, 22  0           ['conv2d_1[0][0]',
                                4)                                'up_sampling2d_2[0][0]']

 dropout_2 (Dropout)            (None, 256, 256, 22  0           ['concatenate_2[0][0]']
                                4)

 conv2d_12 (Conv2D)             (None, 256, 256, 11  225904      ['dropout_2[0][0]']
                                2)

 conv2d_13 (Conv2D)             (None, 256, 256, 11  113008      ['conv2d_12[0][0]']
                                2)

 conv2d_14 (Conv2D)             (None, 256, 256, 1)  113         ['conv2d_13[0][0]']

 reshape (Reshape)              (None, 256, 256)     0           ['conv2d_14[0][0]']

==================================================================================================
Total params: 10,278,017
Trainable params: 10,278,017
Non-trainable params: 0
__________________________________________________________________________________________________
None
D:\Shahriyar_Haseeb\Code\cda_env\cda-unet:280: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.
  model.fit_generator(
2022-06-09 13:29:12.985817: I tensorflow/stream_executor/cuda/cuda_dnn.cc:368] Loaded cuDNN version 8100
1500/1500 [==============================] - 313s 206ms/step - loss: 0.1208 - val_loss: 0.0565
1500/1500 [==============================] - 309s 206ms/step - loss: 0.0950 - val_loss: 0.0553
1500/1500 [==============================] - 309s 206ms/step - loss: 0.0908 - val_loss: 0.0514
1500/1500 [==============================] - 307s 205ms/step - loss: 0.0883 - val_loss: 0.0495

*********Custom Loss*********
skipping iteration 883,N_csv=3,N_detect=0,N_match=0
skipping iteration 932,N_csv=4,N_detect=0,N_match=0
32/32 [==============================] - 6s 171ms/step - loss: 0.0506
binary XE score = 0.050586
mean and std of N_match/N_csv (recall) = 0.560546, 0.215322
mean and std of N_match/(N_match + (N_detect-N_match))
              (precision) = 0.803023, 0.180811
mean and std of F_1 score = 0.621801, 0.153844
mean and std of (N_detect - N_match)/N_detect (fraction
              of craters that are new) = 0.147004, 0.117741
mean and std of (N_detect - N_match)/N_csv (fraction of
              "craters that are new, 2) = 0.135333, 0.151732
median and IQR fractional longitude diff = 0.106736, 25:0.081472, 75:0.129418
median and IQR fractional latitude diff = 0.102033, 25:0.077011, 75:0.127883
median and IQR fractional radius diff = 0.077799, 25:0.060264, 75:0.096068
mean and std of frac_duplicates: 0.006361, 0.022768
mean and std of maximum detected pixel radius in an image =
              17.655899, 7.274001
absolute maximum detected pixel radius over all images =
              39.000000

###################################
##########END_OF_RUN_INFO##########
learning_rate=1.000000e-04, batch_size=4, filter_length=3.000000e+00, n_epoch=4
          n_train=6000, img_dimensions=256, init=he_normal, n_filters=112, lambda=1.000000e-06
          dropout=0.150000

*********Custom Loss*********
32/32 [==============================] - 5s 169ms/step - loss: 0.0986
binary XE score = 0.098587
mean and std of N_match/N_csv (recall) = 0.548272, 0.205718
mean and std of N_match/(N_match + (N_detect-N_match))
              (precision) = 0.796199, 0.156129
mean and std of F_1 score = 0.613439, 0.133744
mean and std of (N_detect - N_match)/N_detect (fraction
              of craters that are new) = 0.156726, 0.098333
mean and std of (N_detect - N_match)/N_csv (fraction of
              "craters that are new, 2) = 0.137701, 0.139604
median and IQR fractional longitude diff = 0.101908, 25:0.085115, 75:0.119176
median and IQR fractional latitude diff = 0.100033, 25:0.081991, 75:0.119283
median and IQR fractional radius diff = 0.078043, 25:0.065125, 75:0.090843
mean and std of frac_duplicates: 0.013109, 0.028837
mean and std of maximum detected pixel radius in an image =
              21.699435, 7.025060
absolute maximum detected pixel radius over all images =
              40.000000

###################################
###################################